





#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>
using namespace std;

const int MAX = 100;
vector<int> graph[MAX];
bool visited[MAX];

void parallelBFS(int start, int n) {
    queue<int> q;
    q.push(start);
    visited[start] = true;

    cout << "Parallel BFS Traversal: ";

    while (!q.empty()) {
        int qSize = q.size();

        #pragma omp parallel for
        for (int i = 0; i < qSize; i++) {
            int currNode;

            #pragma omp critical
            {
                currNode = q.front();
                q.pop();
                cout << currNode << " ";
            }

            #pragma omp critical
            {
                for (int neighbor : graph[currNode]) {
                    if (!visited[neighbor]) {
                        visited[neighbor] = true;
                        q.push(neighbor);
                    }
                }
            }
        }
    }
}s

int main() {
    int n, m, start;
    cout << "Enter number of nodes and edges: ";
    cin >> n >> m;

    cout << "Enter edges (u v):\n";
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u); // for undirected graph
    }

    cout << "Enter start node: ";
    cin >> start;

    fill(visited, visited + n, false);
    parallelBFS(start, n);

    return 0;
}



